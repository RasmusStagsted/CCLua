local protocol = "slave"
local modemSide = "back"

local args = {...}

-- Setup boundary box
local x1 = math.min(args[1], args[4])
local y1 = math.min(args[2], args[5])
local z1 = math.min(args[3], args[6])
local x2 = math.max(args[1], args[4])
local y2 = math.max(args[2], args[5])
local z2 = math.max(args[3], args[6])

local slaveStatus = {}

local map = {}

local coordStack = {}

local taskList = {}

function drawMap()
	for x = x1, x2, 1 do
		local str = ""
		for z = z1, z2, 1 do
			if (map[i][0][j] == "unknown") then
				str = str .. "?"
			elseif (map[i][0][j] == "freespace") then
				str = str .. " "
			elseif (map[i][0][j] == "obstacle") then
				str = str .. "x"
			end
		end
		print(str)
	end
end

function getClosest(coord)
	local tempCoord = {}

	tempCoord[1] = {coord[1] + 1, coord[2], coord[3]}
	tempCoord[2] = {coord[1], coord[2] + 1, coord[3]}
	tempCoord[3] = {coord[1], coord[2], coord[3] + 1}
	tempCoord[4] = {coord[1] - 1, coord[2], coord[3]}
	tempCoord[5] = {coord[1], coord[2] - 1, coord[3]}
	tempCoord[6] = {coord[1], coord[2], coord[3] - 1}

	for i = 1, 6, 1 do
		if (	tempCoord[i][1] < tonumber(args[1]) or
			tempCoord[i][2] < tonumber(args[2]) or
			tempCoord[i][3] < tonumber(args[3]) or
			tempCoord[i][1] > tonumber(args[4]) or
			tempCoord[i][2] > tonumber(args[5]) or
			tempCoord[i][3] > tonumber(args[6])) then

		elseif (map[tempCoord[i][1]][tempCoord[i][2]][tempCoord[i][3]] == "unknown") then
			return tempCoord[i]
		elseif (map[tempCoord[i][1]][tempCoord[i][2]][tempCoord[i][3]] == "freespace") then
			table.insert(coordStack, {tempCoord[i]})
		elseif (map[tempCoord[i][1]][tempCoord[i][2]][tempCoord[i][3]] == "obstacle") then

		end
	end
	return nil
end

function getTask(coord, id)
	local target = getClosest(coord);
	if (target == nil) then
		return "os.sleep(5)"
	end
	taskList[id] = coord
	return "move.to(" .. target[1] .. ", " .. target[2] .. ", " .. target[3] .. ")"
end

function main()

	if (#args < 6) then
		print("program <x1> <y1> <z1> <x2> <y2> <z2>")
	else

		if (#args >= 7) then
			modemSide = args[7]
		end

		for x = x1, x2, 1 do
			map[x] = {}
			for y = y1, y2, 1 do
				map[x][y] = {}
				for z = z1, z2, 1 do
					map[x][y][z] = "unknown";
				end
			end
		end

		-- Open network device
		rednet.open(modemSide)

		while (true) do

			print("Idle!")

			-- Receive message from slave
			local id, mes = rednet.receive(protocol)

			-- Decode message
			local cmd = {}
			local i = 1
			for str in string.gmatch(mes, "%S+") do
				cmd[i] = str
				i = i + 1
			end

			-- Get commands
			if (cmd[1] == "get") then

				-- Get server ID
				if (cmd[2] == "serverID") then
					rednet.send(id, "ack", protocol)
					print("Slave connected!")
					slaveStatus[id] = "Idle!"

				-- Get task
				elseif (cmd[2] == "task") then
					local coord = {}
					for i = 1, 3, 1 do
						coord[i] = tonumber(cmd[i + 2])
					end
					local task = getTask(coord, id)
					print("Slave " .. id .. " received task: " .. task)
					rednet.send(id, task, protocol)
					slaveStatus[id] = "Working!"
				end

			-- End commands
			elseif (cmd[1] == "end") then

				-- End task
				if (cmd[2] == "task") then
					print("Client ended task")
					rednet.send(id, "ack", protocol)
					map[taskList[id][1]][taskList[id][2]][taskList[id][3]] = cmd[3]
					drawMap()
					slaveStatus[id] = "Idle!"
				end
			end

			for key, value in ipairs(slaveStatus) do
				print(key, value)
			end

		end

		-- Close network device
		rednet.close(modemSide)
	end
end

main()
